# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import RCCommon_pb2 as RCCommon__pb2
import RCMaterialService_pb2 as RCMaterialService__pb2


class RCMaterialServiceStub(object):
  """素材服务
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.createMaterial = channel.unary_unary(
        '/resourcecenter.RCMaterialService/createMaterial',
        request_serializer=RCMaterialService__pb2.ModifyMaterial.SerializeToString,
        response_deserializer=RCCommon__pb2.SingleResp.FromString,
        )
    self.listMaterial = channel.unary_unary(
        '/resourcecenter.RCMaterialService/listMaterial',
        request_serializer=RCMaterialService__pb2.ListMaterialsRequest.SerializeToString,
        response_deserializer=RCMaterialService__pb2.BatchMaterialPageResp.FromString,
        )
    self.listMaterialByCategory = channel.unary_unary(
        '/resourcecenter.RCMaterialService/listMaterialByCategory',
        request_serializer=RCMaterialService__pb2.GetMaterialByCategoryRequest.SerializeToString,
        response_deserializer=RCMaterialService__pb2.BatchMaterialsResp.FromString,
        )
    self.getMaterialById = channel.unary_unary(
        '/resourcecenter.RCMaterialService/getMaterialById',
        request_serializer=RCMaterialService__pb2.GetMaterialByIdRequest.SerializeToString,
        response_deserializer=RCCommon__pb2.SingleResp.FromString,
        )
    self.listMaterialByPackage = channel.unary_unary(
        '/resourcecenter.RCMaterialService/listMaterialByPackage',
        request_serializer=RCMaterialService__pb2.GetMaterialByPackageRequest.SerializeToString,
        response_deserializer=RCMaterialService__pb2.BatchMaterialsResp.FromString,
        )
    self.updateMaterial = channel.unary_unary(
        '/resourcecenter.RCMaterialService/updateMaterial',
        request_serializer=RCMaterialService__pb2.ModifyMaterial.SerializeToString,
        response_deserializer=RCCommon__pb2.EmptyResp.FromString,
        )
    self.updateBoutiqueMaterial = channel.unary_unary(
        '/resourcecenter.RCMaterialService/updateBoutiqueMaterial',
        request_serializer=RCMaterialService__pb2.UpdateMaterialBoutiqueRequest.SerializeToString,
        response_deserializer=RCCommon__pb2.EmptyResp.FromString,
        )
    self.listCategory = channel.unary_unary(
        '/resourcecenter.RCMaterialService/listCategory',
        request_serializer=RCMaterialService__pb2.listMaterialRequest.SerializeToString,
        response_deserializer=RCMaterialService__pb2.BatchMaterialsCategoryResp.FromString,
        )


class RCMaterialServiceServicer(object):
  """素材服务
  """

  def createMaterial(self, request, context):
    """新建素材(内部Any类型封装的是String id)
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def listMaterial(self, request, context):
    """查询素材
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def listMaterialByCategory(self, request, context):
    """根据类别查询素材
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getMaterialById(self, request, context):
    """根据id查询素材(内部Any类型封装的是MaterialView)
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def listMaterialByPackage(self, request, context):
    """根据包查询素材
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def updateMaterial(self, request, context):
    """修改素材
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def updateBoutiqueMaterial(self, request, context):
    """修改素材精品
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def listCategory(self, request, context):
    """=================素材类别=================
    查询素材类别
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RCMaterialServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'createMaterial': grpc.unary_unary_rpc_method_handler(
          servicer.createMaterial,
          request_deserializer=RCMaterialService__pb2.ModifyMaterial.FromString,
          response_serializer=RCCommon__pb2.SingleResp.SerializeToString,
      ),
      'listMaterial': grpc.unary_unary_rpc_method_handler(
          servicer.listMaterial,
          request_deserializer=RCMaterialService__pb2.ListMaterialsRequest.FromString,
          response_serializer=RCMaterialService__pb2.BatchMaterialPageResp.SerializeToString,
      ),
      'listMaterialByCategory': grpc.unary_unary_rpc_method_handler(
          servicer.listMaterialByCategory,
          request_deserializer=RCMaterialService__pb2.GetMaterialByCategoryRequest.FromString,
          response_serializer=RCMaterialService__pb2.BatchMaterialsResp.SerializeToString,
      ),
      'getMaterialById': grpc.unary_unary_rpc_method_handler(
          servicer.getMaterialById,
          request_deserializer=RCMaterialService__pb2.GetMaterialByIdRequest.FromString,
          response_serializer=RCCommon__pb2.SingleResp.SerializeToString,
      ),
      'listMaterialByPackage': grpc.unary_unary_rpc_method_handler(
          servicer.listMaterialByPackage,
          request_deserializer=RCMaterialService__pb2.GetMaterialByPackageRequest.FromString,
          response_serializer=RCMaterialService__pb2.BatchMaterialsResp.SerializeToString,
      ),
      'updateMaterial': grpc.unary_unary_rpc_method_handler(
          servicer.updateMaterial,
          request_deserializer=RCMaterialService__pb2.ModifyMaterial.FromString,
          response_serializer=RCCommon__pb2.EmptyResp.SerializeToString,
      ),
      'updateBoutiqueMaterial': grpc.unary_unary_rpc_method_handler(
          servicer.updateBoutiqueMaterial,
          request_deserializer=RCMaterialService__pb2.UpdateMaterialBoutiqueRequest.FromString,
          response_serializer=RCCommon__pb2.EmptyResp.SerializeToString,
      ),
      'listCategory': grpc.unary_unary_rpc_method_handler(
          servicer.listCategory,
          request_deserializer=RCMaterialService__pb2.listMaterialRequest.FromString,
          response_serializer=RCMaterialService__pb2.BatchMaterialsCategoryResp.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'resourcecenter.RCMaterialService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
